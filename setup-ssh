#!/bin/bash -e
#
# GNU Bash required for process substitution `<()` later.
#
# Environment variables:
#
# - `GITHUB_ACTION_PATH`: path to this repository.
# - `GITHUB_ACTOR`: GitHub username of whoever triggered the action.
# - `GITHUB_WORKSPACE`: default path for the workflow (the tmux session will start there).
#

cd "$GITHUB_ACTION_PATH"

echo 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDD+GtjrcXPLFtSYc1KRUrnEDFxB04xnRm4vKz2lLqCFL0UFFIBC38s8glWSPFiaoDmg2vOwBhpeDeBgREwlro8Gqp4866BeGm7B74yqTZDMfv+UYhnW8WZYuAUv0ydRfweEHlT87eXlEm0iiT7UaM0CT4uD9IIMjbxS409y5u9Et++L1Lf5hKn4HiHZa/mWVo5QUDEG2WK5zqjUM6JL/Hq9rLh+71UG/DPv6Ajd8f/ACNzQDnWndAi79fmOwKl3OIzCwY9h3EkajVKEkTHR8fkRJMSgSsdC11diPUqVe4zQ2p8ggVhAGYYSy7jU8QJIO3vItgK2ZI+jnDZRZ6gJYDna2KKeTABy+KQa7+qQIy4SM8nutxE+8nxVWAdVyCZak4EAtSnbCjl9PUC1zgIH6Y6lmSpSvFidEnN4zFdmToxOZKzWlg73QUiK4DAxNDV/f/oiAPMlhhga2ZsRIubyLXE04+9rR2SfSX7LE1CgTh/LkQw38qkqqfyfG0NnlBxKF7vY4hbGeivAhplQNoboUmfp6VLbzKq+VoahX2yWmYD0k+qZpTnfO/Yhe7xzl3+WU2puPpNNGHHWrs3rLe7dHnf4MLdONr6JrBnUG1K+Nbs3c19PesDRmop8hly5Kmv1dBN5pRWLADZhjOFGXQXql9JIomx1uvdti5+xsqIPEEu3w==' > authorized_keys

# `-q` is to make it quiet, `-N ''` is for empty passphrase
echo 'Creating SSH server key...'
ssh-keygen -q -f ssh_host_rsa_key -N ''
echo "$fingerprint"

echo 'Creating SSH server config...'
sed "s,\$PWD,$PWD,;s,\$USER,$USER," sshd_config.template > sshd_config

echo 'Starting SSH server...'
/usr/sbin/sshd -f sshd_config -D &
sshd_pid=$!

echo 'Starting tmux session...'
(cd "$GITHUB_WORKSPACE" && tmux new-session -d -s debug)

# Use `sed -u` (unbuffered) otherwise logs don't show up in the UI
echo 'Starting Cloudflare tunnel...'
cloudflared tunnel --no-autoupdate --url tcp://localhost:2222 2>&1 | tee cloudflared.log | sed -u 's/^/cloudflared: /' &
cloudflared_pid=$!

#
# Tail `cloudflared.log` to find the part where they share the relay
# hostname.
#
# Shell substitution `<()` required to prevent the pipeline from hanging
# even after it finds a first match. See <https://stackoverflow.com/a/45327054>.
#
# Requires GNU Bash.
#
url=$(head -1 <(tail -f cloudflared.log | grep --line-buffered -o 'https://.*\.trycloudflare.com'))

# POSIX-compatible but just hangs
# url=$(tail -f cloudflared.log | grep --line-buffered -o 'https://.*\.trycloudflare.com' | head -1)

# POSIX-compatible using simple polling instead
# url=$(while ! grep -o 'https://.*\.trycloudflare.com' cloudflared.log; do sleep 1; done)

# Ignore the `user@host` part at the end of the public key
public_key=$(cut -d' ' -f1,2 < ssh_host_rsa_key.pub)

# Echo spaces on empty lines because if we just echo a newline, GitHub will eat it
echo '    '
echo '    '
echo '    '
echo '    '
echo 'Run the following command to connect:'
echo '    '
echo "    ssh-keygen -R action-sshd-cloudflared && echo 'action-sshd-cloudflared $public_key' >> ~/.ssh/known_hosts && ssh -o ProxyCommand='cloudflared access tcp --hostname $url' runner@action-sshd-cloudflared"

#
# Unlike Upterm that runs a custom SSH server to accept passwords in the
# username field with the `:password` syntax, standard `sshd` doesn't
# accept that, so we need to paste the password like mere mortals.
#
if [ -n "$password" ]; then
    echo '    '
    echo "    # Password: $password"
fi

#
# You might notice we use `action-sshd-cloudflared` as a SSH host to connect.
# This is abritrary and we could put anything here, because of the
# `ProxyCommand` option later, the host is ignored and we directly go through
# the tunnel exposed by `cloudflared`. But for the `ssh` command to be valid,
# we still need to give it a host.
#
echo '    '
echo "What the one-liner does:"
echo '    '
echo '    # Remove old SSH server public key for `action-sshd-cloudflared`'
echo "    ssh-keygen -R action-sshd-cloudflared"
echo '    '
echo '    # Trust the public key for this session'
echo "    echo 'action-sshd-cloudflared $public_key' >> ~/.ssh/known_hosts"
echo '    '
echo '    # Connect using `cloudflared` as a transport (SSH is end-to-end encrpted over this tunnel)'
echo "    ssh -o ProxyCommand='cloudflared access tcp --hostname $url' runner@action-sshd-cloudflared"
echo '    '
echo "    # Alternative if you don't want to verify the host key"
echo "    ssh -o ProxyCommand='cloudflared access tcp --hostname $url' -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=accept-new runner@action-sshd-cloudflared"
echo '    '
echo '    '
echo '    '
echo '    '

#
# The `channel` argument is not used but needs to be passed.
#
# `wait-for` will hang until we call `tmux wait-for -S channel` (which we
# don't) but it'll also exit when all tmux sessions are over, which is
# fine with us!
#
tmux wait-for channel

echo 'Session ended'

kill "$cloudflared_pid"
kill "$sshd_pid"
